// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Env from "../Env.mjs";
import * as Uuid from "uuid";
import * as Ethers from "ethers";
import * as Helpers from "../Helpers.mjs";
import * as Endpoints from "../Endpoints.mjs";
import * as Exceptions from "../Exceptions.mjs";
import * as Gist$Utils from "@brightidbot/utils/src/Gist.mjs";
import * as DiscordJs from "discord.js";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as Decode$Shared from "@brightidbot/shared/src/Decode.mjs";
import * as Commands_Verify from "../commands/Commands_Verify.mjs";
import * as Services_Sponsor from "../services/Services_Sponsor.mjs";
import * as Json$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json.mjs";
import * as Json_Decode$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json_Decode.mjs";

function sleep(_ms) {
  return (new Promise((resolve) => setTimeout(resolve, _ms)));
}

Env.createEnv(undefined);

var config = Env.getConfig(undefined);

var envConfig;

if (config.TAG === /* Ok */0) {
  envConfig = config._0;
} else {
  throw {
        RE_EXN_ID: Env.EnvError,
        _1: config._0,
        Error: new Error()
      };
}

async function sponsorRequestSubmittedMessageOptions(param) {
  var nowInSeconds = Math.round(Date.now() / 1000);
  var fifteenMinutesAfter = 15 * 60 + nowInSeconds;
  var content = "You sponsor request has been submitted! \n\n Make sure you have scanned the QR code above in the BrightID mobile app to confirm your sponsor and link Discord to BrightID. \n This process will timeout <t:" + fifteenMinutesAfter.toString() + ":R>.\n\nPlease be patient as the BrightID nodes sync your request \n";
  return {
          content: content,
          ephemeral: true
        };
}

async function noWriteToGistMessage(interaction) {
  var options = {
    content: "It seems like I can't write to my database at the moment. Please try again or contact the BrightID support.",
    ephemeral: true
  };
  return await interaction.followUp(options);
}

function makeAfterSponsorActionRow(label) {
  var verifyButton = new DiscordJs.MessageButton().setCustomId("verify").setLabel(label).setStyle("PRIMARY");
  return new DiscordJs.MessageActionRow().addComponents([verifyButton]);
}

async function checkSponsor(uuid) {
  var endpoint = "https://app.brightid.org/node/v5/sponsorships/" + uuid + "";
  var params = {
    method: "GET",
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json"
    },
    timeout: 60000
  };
  var res = await globalThis.fetch(endpoint, params);
  var json = await res.json();
  var match = Json$JsonCombinators.decode(json, Decode$Shared.Decode_BrightId.Sponsorships.data);
  var match$1 = Json$JsonCombinators.decode(json, Decode$Shared.Decode_BrightId.$$Error.data);
  if (match.TAG === /* Ok */0) {
    return /* Sponsorship */{
            _0: match._0.data
          };
  }
  if (match$1.TAG === /* Ok */0) {
    throw {
          RE_EXN_ID: Exceptions.BrightIdError,
          _1: match$1._0,
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: Json_Decode$JsonCombinators.DecodeError,
        _1: match._0,
        Error: new Error()
      };
}

function gistConfig(param) {
  return Gist$Utils.makeGistConfig(envConfig.gistId, "guildData.json", envConfig.githubAccessToken);
}

async function execute(interaction) {
  var guild = interaction.guild;
  var guildId = guild.id;
  var member = interaction.member;
  var memberId = member.id;
  var uuid = Uuid.v5(memberId, envConfig.uuidNamespace);
  var exit = 0;
  var val;
  try {
    val = await interaction.deferReply({
          ephemeral: true
        });
    exit = 1;
  }
  catch (e){
    throw e;
  }
  if (exit === 1) {
    var exit$1 = 0;
    var guilds;
    try {
      guilds = await Gist$Utils.ReadGist.content(gistConfig(undefined), Decode$Shared.Decode_Gist.brightIdGuilds);
      exit$1 = 2;
    }
    catch (e$1){
      throw e$1;
    }
    if (exit$1 === 2) {
      var guildData = guilds[guildId];
      if (guildData !== undefined) {
        var exit$2 = 0;
        var val$1;
        try {
          val$1 = await Services_Sponsor.handleSponsor(undefined, undefined, interaction, uuid, Helpers.fifteenMinutesFromNow(undefined));
          exit$2 = 3;
        }
        catch (e$2){
          throw e$2;
        }
        if (exit$2 === 3) {
          switch (val$1) {
            case /* SponsorshipUsed */0 :
                var usedSponsorships = Core__Option.getWithDefault(guildData.usedSponsorships, Ethers.constants.Zero.toString());
                var usedSponsorships$1 = Ethers.BigNumber.from(usedSponsorships).add("1").toString();
                var updateUsedSponsorships = await Gist$Utils.UpdateGist.updateEntry(guilds, guildId, {
                      role: guildData.role,
                      name: guildData.name,
                      inviteLink: guildData.inviteLink,
                      roleId: guildData.roleId,
                      sponsorshipAddress: guildData.sponsorshipAddress,
                      sponsorshipAddressEth: guildData.sponsorshipAddressEth,
                      usedSponsorships: usedSponsorships$1,
                      assignedSponsorships: guildData.assignedSponsorships,
                      premiumSponsorshipsUsed: guildData.premiumSponsorshipsUsed,
                      premiumExpirationTimestamp: guildData.premiumExpirationTimestamp
                    }, gistConfig(undefined));
                if (updateUsedSponsorships.TAG === /* Ok */0) {
                  var options = await Services_Sponsor.successfulSponsorMessageOptions(uuid);
                  await interaction.followUp(options);
                } else {
                  console.error("Buttons Sponsor: Error updating used sponsorships", updateUsedSponsorships._0);
                  await noWriteToGistMessage(interaction);
                }
                break;
            case /* RetriedCommandDuring */1 :
                var options$1 = {
                  content: "Your request is still processing. Maybe you haven't scanned the QR code yet?\n\n If you have already scanned the code, please wait a few minutes for BrightID nodes to sync your sponsorship request",
                  ephemeral: true
                };
                await interaction.followUp(options$1);
                break;
            case /* NoUnusedSponsorships */2 :
                await interaction.followUp(Services_Sponsor.noUnusedSponsorshipsOptions(undefined));
                break;
            case /* TimedOut */3 :
                var options$2 = await Services_Sponsor.unsuccessfulSponsorMessageOptions(uuid);
                await interaction.editReply(options$2);
                break;
            
          }
        }
        return ;
      }
      await noWriteToGistMessage(interaction);
      throw {
            RE_EXN_ID: Exceptions.SponsorButtonError,
            _1: "Buttons_Sponsor: Guild with guildId: " + guildId + " not found in gist",
            Error: new Error()
          };
    }
    
  }
  
}

var brightIdAppDeeplink = Endpoints.brightIdAppDeeplink;

var brightIdLinkVerificationEndpoint = Endpoints.brightIdLinkVerificationEndpoint;

var makeCanvasFromUri = Commands_Verify.makeCanvasFromUri;

var createMessageAttachmentFromCanvas = Commands_Verify.createMessageAttachmentFromCanvas;

var makeBeforeSponsorActionRow = Commands_Verify.makeBeforeSponsorActionRow;

var customId = "before-sponsor";

export {
  brightIdAppDeeplink ,
  brightIdLinkVerificationEndpoint ,
  makeCanvasFromUri ,
  createMessageAttachmentFromCanvas ,
  makeBeforeSponsorActionRow ,
  sleep ,
  envConfig ,
  sponsorRequestSubmittedMessageOptions ,
  noWriteToGistMessage ,
  makeAfterSponsorActionRow ,
  checkSponsor ,
  gistConfig ,
  execute ,
  customId ,
}
/*  Not a pure module */
